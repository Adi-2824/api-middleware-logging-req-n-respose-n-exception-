using Microsoft.AspNetCore.Http;
using System;
using System.IO;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace YourProjectName.Logging
{
    // Minimal debug version to identify the issue
    public class DebugLoggingMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly string _logFile;

        public DebugLoggingMiddleware(RequestDelegate next)
        {
            _next = next;
            var logDir = Path.Combine(Directory.GetCurrentDirectory(), "Logs");
            _logFile = Path.Combine(logDir, "debug.log");
            
            if (!Directory.Exists(logDir))
            {
                Directory.CreateDirectory(logDir);
            }
        }

        public async Task InvokeAsync(HttpContext context)
        {
            var startTime = DateTime.UtcNow;
            
            try
            {
                await LogStep("1. Starting middleware", context);
                
                // Skip request body capture for now
                await LogStep("2. About to call next middleware", context);
                
                await _next(context);
                
                await LogStep("3. Returned from next middleware successfully", context);
                
                // Log basic info without body capture
                await LogBasicRequest(context, startTime);
            }
            catch (Exception ex)
            {
                await LogStep($"4. Exception caught: {ex.GetType().Name} - {ex.Message}", context);
                await LogException(ex);
                
                // Don't interfere with exception handling for now
                throw;
            }
        }

        private async Task LogStep(string step, HttpContext context)
        {
            try
            {
                var logEntry = new
                {
                    Timestamp = DateTime.UtcNow,
                    Step = step,
                    RequestId = context.TraceIdentifier,
                    Method = context.Request.Method,
                    Path = context.Request.Path.ToString(),
                    StatusCode = context.Response.StatusCode
                };

                var logText = $"{JsonSerializer.Serialize(logEntry)}{Environment.NewLine}";
                await File.AppendAllTextAsync(_logFile, logText);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to log step: {ex.Message}");
            }
        }

        private async Task LogBasicRequest(HttpContext context, DateTime startTime)
        {
            try
            {
                var duration = DateTime.UtcNow - startTime;
                
                var logEntry = new
                {
                    Timestamp = startTime,
                    RequestId = context.TraceIdentifier,
                    Method = context.Request.Method,
                    Path = context.Request.Path.ToString(),
                    QueryString = context.Request.QueryString.ToString(),
                    StatusCode = context.Response.StatusCode,
                    Duration = duration.TotalMilliseconds,
                    ContentType = context.Request.ContentType,
                    ContentLength = context.Request.ContentLength,
                    UserAgent = context.Request.Headers.ContainsKey("User-Agent") ? context.Request.Headers["User-Agent"].ToString() : "N/A"
                };

                var logText = $"REQUEST: {JsonSerializer.Serialize(logEntry, new JsonSerializerOptions { WriteIndented = true })}{Environment.NewLine}";
                await File.AppendAllTextAsync(_logFile, logText);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to log request: {ex.Message}");
            }
        }

        private async Task LogException(Exception ex)
        {
            try
            {
                var logEntry = new
                {
                    Timestamp = DateTime.UtcNow,
                    ExceptionType = ex.GetType().Name,
                    Message = ex.Message,
                    StackTrace = ex.StackTrace,
                    Source = ex.Source
                };

                var logText = $"EXCEPTION: {JsonSerializer.Serialize(logEntry, new JsonSerializerOptions { WriteIndented = true })}{Environment.NewLine}";
                await File.AppendAllTextAsync(_logFile, logText);
            }
            catch (Exception logEx)
            {
                Console.WriteLine($"Failed to log exception: {logEx.Message}");
            }
        }
    }

    // Extension method for debug middleware
    public static class DebugLoggingExtensions
    {
        public static IApplicationBuilder UseDebugLogging(this IApplicationBuilder builder)
        {
            return builder.UseMiddleware<DebugLoggingMiddleware>();
        }
    }
}
